// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using restaurant_service.DBContext;

#nullable disable

namespace restaurant_service.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("restaurant_service.Model.Food", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("Restaurantid")
                        .HasColumnType("text");

                    b.Property<bool>("available")
                        .HasColumnType("boolean");

                    b.Property<int>("discount")
                        .HasColumnType("integer");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("price")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("restaurant_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Restaurantid");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("restaurant_service.Model.Notification", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("Restaurantid")
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("date_of_creation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("restaurant_email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Restaurantid");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("restaurant_service.Model.Restaurant", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<bool>("account_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("account_suspended")
                        .HasColumnType("boolean");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("postal_code")
                        .HasColumnType("integer");

                    b.Property<int>("verification_code")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("restaurant_service.Model.Food", b =>
                {
                    b.HasOne("restaurant_service.Model.Restaurant", null)
                        .WithMany("menu")
                        .HasForeignKey("Restaurantid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("restaurant_service.Model.Notification", b =>
                {
                    b.HasOne("restaurant_service.Model.Restaurant", null)
                        .WithMany("notifications")
                        .HasForeignKey("Restaurantid");
                });

            modelBuilder.Entity("restaurant_service.Model.Restaurant", b =>
                {
                    b.Navigation("menu");

                    b.Navigation("notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
